#!/usr/bin/python3
"""
Names: Vicky Feng
Student Number: FNGVIC001
Prac: 1
Date: 22/07/2019
"""

# import Relevant Librares
import RPi.GPIO as GPIO
import time
from itertools import product 

# global variables
binaryArray = list(product([0,1],[0,1],[0,1]))
upButtonPressed = False
downButtonPressed = False
index = 0

# set channel numbering system
GPIO.setmode(GPIO.BCM)
# set channels as inputs/outputs
chan_out = [26,6,5]
GPIO.setup(chan_out, GPIO.OUT, initial = 0)
chan_in = [17,27]
GPIO.setup(chan_in, GPIO.IN, pull_up_down = GPIO.PUD_UP)

def showLights(binaryValue):
#    print("Displaying: " + str(binaryValue))
    GPIO.output(chan_out,binaryValue)
    #GPIO.output(6,binaryValue[1])
    #GPIO.output(26,binaryValue[0])
def count(channel):    
    if channel == 17:
        countUp(channel)
    else:
        countDown(channel)
        
def countUp(channel):
    global index
    global downButtonPressed 
    global upButtonPressed
    global binaryArray
    
#    downButtonPressed = False
#    upButtonPressed = True
#    while upButtonPressed:
    index = index + 1 if index < 7 else 0
    binaryValue = binaryArray[index]
#    print("Counting Up")
    showLights(binaryValue)
    
    time.sleep(0.5)

def countDown(channel):
    global index
    global downButtonPressed 
    global upButtonPressed
    global binaryArray
    
#    downButtonPressed = True
#    upButtonPressed = False
#    while downButtonPressed:
    index = index - 1 if index > 0 else 7
    binaryValue = binaryArray[index]
#    print("Counting down")
    showLights(binaryValue)
    
    time.sleep(0.5)

GPIO.add_event_detect(17, GPIO.FALLING,callback = count, bouncetime = 300)    
GPIO.add_event_detect(27, GPIO.FALLING,callback = count, bouncetime = 300)    

def main():
    pass
    
# Only run the functions if 
if __name__ == "__main__":
    # Make sure the GPIO is stopped correctly
    try:
        while True:
            main()
    except KeyboardInterrupt:
        print("Exiting gracefully")
        # Turn off your GPIOs here
        GPIO.cleanup()
    except Exception as e:
        GPIO.cleanup()
        print("Some other error occurred")
        #print(e.message)
        print(str(e))
